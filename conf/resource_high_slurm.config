params {
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 40
    max_time                   = '240.h'
}

executor {
    name = 'slurm'
    // accoount = 'pi-mengjiechen'
    accoount = 'pi-chuanhe'
    cpus = 24
    memory = 4096
    perCpuMemAllocation = true 
    queueSize = 50         // 可选，设置队列大小
}

process {
    executor = 'slurm'
    // queue = 'baimoc_nf'    // 可选，指定队列
    
    // set default SLURM params

    clusterOptions = '''
        #SBATCH --job-name=cutandtag_ago_yh
        #SBATCH --output=cutandtag_ago_yh.out
        #SBATCH --error=cutandtag_ago_yh.err
        #SBATCH --time=120:00:00
        #SBATCH --partition=caslake
        #SBATCH --nodes=1
        #SBATCH --mail-type=ALL
        #SBATCH --mail-user=leizheng@uchicago.edu
    '''
    // midway2
    // clusterOptions = '''
    //     #SBATCH --job-name=lowinput_ubs_seq
    //     #SBATCH --output=lowinput_ubs_seq.out
    //     #SBATCH --error=lowinput_ubs_seq.err
    //     #SBATCH --account=pi-mengjiechen
    //     #SBATCH --time=120:00:00
    //     #SBATCH --partition=broadwl
    //     #SBATCH --nodes=4
    //     #SBATCH --ntasks-per-node=28
    //     #SBATCH --mem-per-cpu=64000
    //     #SBATCH --mail-type=ALL
    //     #SBATCH --mail-user=leizheng@uchicago.edu
    // '''

    // midway3 
//     clusterOptions = '''
// #SBATCH --job-name=lowinput_ubs_seq
// #SBATCH --output=lowinput_ubs_seq.out
// #SBATCH --error=lowinput_ubs_seq.err
// #SBATCH --account=pi-mengjiechen
// #SBATCH --time=20:00:00
// #SBATCH --partition=caslake
// #SBATCH --nodes=1
// #SBATCH --mail-type=ALL
// #SBATCH --mail-user=leizheng@uchicago.edu
//     '''

    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }

    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    withLabel:trim_galore {
        cpus   = { check_max( 6                   , 'cpus'    ) }
        memory = { check_max( 16.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 6.h   * task.attempt, 'time'    ) }
    }

    withLabel:hisat3n_table {
        cpus   = { check_max( 24                   , 'cpus'    ) }
        memory = { check_max( 32.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 6.h   * task.attempt, 'time'    ) }
    }

    withLabel:process_single {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 6.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_low {
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 16    * task.attempt, 'cpus'    ) }
        memory = { check_max( 32.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 16.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_long {
        time   = { check_max( 20.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        memory = { check_max( 100.GB * task.attempt, 'memory' ) }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}